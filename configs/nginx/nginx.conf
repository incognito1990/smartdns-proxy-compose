user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log info;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    resolver 127.0.0.11 1.1.1.1 ipv6=off valid=30s;

    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;
        # Всё на HTTPS
        return 301 https://$host$request_uri;
    }
}

# --- TCP/UDP Proxy (SNI SmartDNS) ---
stream {
    resolver 127.0.0.11 1.1.1.1 ipv6=off valid=600s;
    resolver_timeout 1s;

    # 1) Решаем, куда отправить
    map $ssl_preread_server_name $route {
        # === ChatGPT / OpenAI ===
        ~*^([a-z0-9-]+\.)*chatgpt\.com$          direct;
        ~*^([a-z0-9-]+\.)*openai\.com$           direct;
        ~*^([a-z0-9-]+\.)*oaistatic\.com$        direct;
        ~*^([a-z0-9-]+\.)*oaiusercontent\.com$   direct;
        ~*^([a-z0-9-]+\.)*auth0\.com$            direct;
        ~*^([a-z0-9-]+\.)*auth\.openai\.com$     direct;
        ~*^([a-z0-9-]+\.)*platform\.openai\.com$ direct;
        ~*^([a-z0-9-]+\.)*cdn\.oaistatic\.com$   direct;
        ~*^([a-z0-9-]+\.)*files\.oaiusercontent\.com$ direct;
        ~*^([a-z0-9-]+\.)*api\.openai\.com$      direct;
        ~*^([a-z0-9-]+\.)*sora\.chatgpt\.com$    direct;
        ~*^sora\.com$                            direct;
        ~*^([a-z0-9-]+\.)*sora\.com$             direct;
        ~*^([a-z0-9-]+\.)*operator\.chatgpt\.com$ direct;
        ~*^([a-z0-9-]+\.)*webrtc\.chatgpt\.com$  direct;
        ~*^([a-z0-9-]+\.)*android\.chat\.openai\.com$ direct;
        ~*^([a-z0-9-]+\.)*videos\.openai\.com$   direct;

        # === Twitch ===
        ~*^usher\.ttvnw\.net$                    direct;
        ~*^([a-z0-9-]+\.)*twitch\.tv$            direct;

        # === Google AI / Gemini ===
        ~*^([a-z0-9-]+\.)*google\.com$           direct;
        ~*^([a-z0-9-]+\.)*goog$                  direct;
        ~*^([a-z0-9-]+\.)*withgoogle\.com$       direct;
        ~*^([a-z0-9-]+\.)*googleapis\.com$       direct;
        ~*^o\.pki\.goog$                         direct;
        ~*^([a-z0-9-]+\.)*notebooklm\.google\.com$ direct;
        ~*^([a-z0-9-]+\.)*labs\.google$          direct;
        ~*^([a-z0-9-]+\.)*aistudio\.google\.com$ direct;
        ~*^([a-z0-9-]+\.)*generativelanguage\.googleapis\.com$ direct;
        ~*^([a-z0-9-]+\.)*aitestkitchen\.withgoogle\.com$ direct;
        ~*^([a-z0-9-]+\.)*aisandbox-pa\.googleapis\.com$ direct;
        ~*^([a-z0-9-]+\.)*webchannel-alkalimakersuite-pa\.clients6\.google\.com$ direct;
        ~*^([a-z0-9-]+\.)*assistant-s3-pa\.googleapis\.com$ direct;
        ~*^([a-z0-9-]+\.)*proactivebackend-pa\.googleapis\.com$ direct;

        # === Microsoft / Bing / Copilot / Xbox ===
        ~*^([a-z0-9-]+\.)*copilot\.microsoft\.com$ direct;
        ~*^([a-z0-9-]+\.)*bing\.com$              direct;
        ~*^([a-z0-9-]+\.)*rewards\.bing\.com$     direct;
        ~*^([a-z0-9-]+\.)*xboxlive\.com$          direct;
        ~*^([a-z0-9-]+\.)*gssv-play-prod\.xboxlive\.com$ direct;
        ~*^([a-z0-9-]+\.)*xsts\.auth\.xboxlive\.com$ direct;

        # === GitHub / Copilot ===
        ~*^([a-z0-9-]+\.)*github\.com$            direct;
        ~*^([a-z0-9-]+\.)*githubcopilot\.com$     direct;
        ~*^([a-z0-9-]+\.)*api\.individual\.githubcopilot\.com$ direct;
        ~*^([a-z0-9-]+\.)*proxy\.individual\.githubcopilot\.com$ direct;

        # === xAI / Grok ===
        ~*^([a-z0-9-]+\.)*grok\.com$              direct;
        ~*^([a-z0-9-]+\.)*x\.ai$                  direct;

        # === Anthropic / Claude ===
        ~*^([a-z0-9-]+\.)*claude\.ai$             direct;
        ~*^([a-z0-9-]+\.)*anthropic\.com$         direct;

        # === Productivity / Tools ===
        ~*^([a-z0-9-]+\.)*notion\.so$             direct;
        ~*^([a-z0-9-]+\.)*canva\.com$             direct;
        ~*^([a-z0-9-]+\.)*deepl\.com$             direct;

        # === Hardware / Development ===
        ~*^([a-z0-9-]+\.)*intel\.com$             direct;
        ~*^([a-z0-9-]+\.)*dell\.com$              direct;
        ~*^([a-z0-9-]+\.)*nvidia\.com$            direct;
        ~*^([a-z0-9-]+\.)*parsec\.app$            direct;
        ~*^tria\.ge$                               direct;
        ~*^([a-z0-9-]+\.)*imgur\.com$             direct;
        ~*^([a-z0-9-]+\.)*dyson\.(com|fr)$        direct;
        ~*^([a-z0-9-]+\.)*manus\.im$              direct;
        ~*^([a-z0-9-]+\.)*4pda\.(to|ws|ru|io)$    direct;

        # ... (прочие публичные домены) ...
        default                                   block;
    }

    # 2) Подставляем backend
    map $route $backend {
        direct    $ssl_preread_server_name:443;
        block     127.0.0.1:4443;   # фейковый listener
    }

    server {
        listen 443;
        ssl_preread on;
        proxy_pass $backend;
        proxy_connect_timeout 10s;
        proxy_timeout 30s;
    }

    # 3) Фейковый upstream для блокировки
    server {
        listen 4443;
        return 444;
    }

    # --- DoT (DNS over TLS) ---
    map $ssl_preread_server_name $dnsroute {
        <YOUR_DOT_DOMAIN> 127.0.0.1:11853;  # плейсхолдер, не коммитить реальный домен
        default            127.0.0.1:4443;
    }

    server {
        listen 853;
        ssl_preread on;
        proxy_pass $dnsroute;
        proxy_connect_timeout 5s;
        proxy_timeout 10s;
    }

    server {
        listen 127.0.0.1:11853 ssl;
        # Используем полноценную структуру Let’s Encrypt (симлинки в live/ сохраняются):
        ssl_certificate     /etc/letsencrypt/live/<YOUR_DOT_DOMAIN>/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/<YOUR_DOT_DOMAIN>/privkey.pem;
        ssl_protocols       TLSv1.2 TLSv1.3;
        proxy_pass          dnsmasq:53;
    }
}
